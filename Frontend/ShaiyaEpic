import React, { useEffect, useMemo, useState, useCallback } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { Textarea } from "@/components/ui/textarea";
import {
 Swords,
 Sparkles,
 Download as DownloadIcon,
 Shield,
 Trophy,
 Crown,
 Globe,
 Users,
 LogIn,
 Play,
 ShoppingCart,
 Calendar,
 Flame,
 Image as ImageIcon,
 Star,
 Sun,
 Moon,
 Languages,
 Info,
 BookOpen,
 LifeBuoy,
 ListChecks,
 Activity,
 Send,
} from "lucide-react";
import {
 AreaChart,
 Area,
 XAxis,
 YAxis,
 Tooltip,
 ResponsiveContainer,
} from "recharts";
// ------------------------------------------------------------
// EPIC SHAIYA FRONTEND — With REAL API wiring points
// - TailwindCSS styling
// - shadcn/ui components
// - framer-motion for animations
// - recharts for live population chart
// - IT/EN language toggle
// - Dark/Light theme toggle
// - NEW: Wiki, Tickets, Rules, Server Status sections
// - NEW: API client helpers & hooks
// ------------------------------------------------------------
// ===== API CLIENT =====
const API_BASE = (import.meta as any)?.env?.VITE_API_BASE ?? "/api"; // set VITE_API_BASE in your .env
type FetchOpts = { signal?: AbortSignal };
async function fetchJSON<T>(path: string, opts: RequestInit & FetchOpts = {}): Promise<T> {
 const controller = new AbortController();
 const signal = opts.signal ?? controller.signal;
 const res = await fetch(`${API_BASE}${path}`, { ...opts, signal, headers: { "Content-Type": "application/json", ... if (!res.ok) {
 const text = await res.text();
 throw new Error(`${res.status} ${res.statusText} — ${text}`);
 }
 return res.json() as Promise<T>;
}
// ===== TYPES (adjust to your backend) =====
interface PopulationPoint { t: string; online: number }
interface NewsItem { id: number; title: string; date: string; tag: string; excerpt: string }
interface EventItem { id: number; when: string; title: string; desc: string; icon?: string }
interface LadderRow { rank: number; name: string; class: string; rating: number; kda: string }
interface ShopItem { id: number; name: string; price: string; type: string; tag?: string; imageUrl?: string }
interface StatusPayload { online: number; uptime: number; version: string; lastRestart: string }
interface WikiResult { id: string; title: string; snippet: string }
interface RulesDoc { markdown: string; updatedAt?: string }
// ===== HOOKS =====
function usePopulation() {
 const [data, setData] = useState<PopulationPoint[]>([]);
 const [loading, setLoading] = useState(true);
 const [error, setError] = useState<string | null>(null);
 useEffect(() => {
 let mounted = true;
 const tick = async () => {
 try {
 const json = await fetchJSON<PopulationPoint[]>("/stats/population");
 if (mounted) { setData(json); setLoading(false); }
 } catch (e: any) { if (mounted) { setError(e.message); setLoading(false); } }
 };
 tick();
 const id = setInterval(tick, 30_000); // poll every 30s
 return () => { mounted = false; clearInterval(id); };
 }, []);
 return { data, loading, error };
}
function useNews() {
 const [data, setData] = useState<NewsItem[]>([]);
 const [loading, setLoading] = useState(true);
 const [error, setError] = useState<string | null>(null);
 useEffect(() => { fetchJSON<NewsItem[]>("/news").then(d => { setData(d); setLoading(false); }).catch(e => { setErro return { data, loading, error };
}
function useEvents() {
 const [data, setData] = useState<EventItem[]>([]);
 const [loading, setLoading] = useState(true);
 const [error, setError] = useState<string | null>(null);
 useEffect(() => { fetchJSON<EventItem[]>("/events").then(d => { setData(d); setLoading(false); }).catch(e => { setE return { data, loading, error };
}
function useLadder() {
 const [data, setData] = useState<LadderRow[]>([]);
 const [loading, setLoading] = useState(true);
 const [error, setError] = useState<string | null>(null);
 useEffect(() => { fetchJSON<LadderRow[]>("/ladder/top").then(d => { setData(d); setLoading(false); }).catch(e => {  return { data, loading, error };
}
function useShop() {
 const [data, setData] = useState<ShopItem[]>([]);
 const [loading, setLoading] = useState(true);
 const [error, setError] = useState<string | null>(null);
 useEffect(() => { fetchJSON<ShopItem[]>("/shop/featured").then(d => { setData(d); setLoading(false); }).catch(e =>  return { data, loading, error };
}
function useServerStatus() {
 const [data, setData] = useState<StatusPayload | null>(null);
 const [pingMs, setPingMs] = useState<number | null>(null);
 const [loading, setLoading] = useState(true);
 const [error, setError] = useState<string | null>(null);
 const ping = useCallback(async () => {
 try {
 const t0 = performance.now();
 const res = await fetch(`${API_BASE}/health`);
 if (!res.ok) throw new Error("Health endpoint not ok");
 const t1 = performance.now();
 setPingMs(Math.round(t1 - t0));
 } catch (e) { /* ignore */ }
 }, []);
 useEffect(() => {
 let mounted = true;
 const tick = async () => {
 try {
 const json = await fetchJSON<StatusPayload>("/status");
 if (mounted) setData(json);
 setLoading(false);
 ping();
 } catch (e: any) { if (mounted) { setError(e.message); setLoading(false); } }
 };
 tick();
 const id = setInterval(tick, 20_000);
 return () => { mounted = false; clearInterval(id); };
 }, [ping]);
 return { data, pingMs, loading, error };
}
function useWiki(query: string) {
 const [data, setData] = useState<WikiResult[]>([]);
 const [loading, setLoading] = useState(false);
 const [error, setError] = useState<string | null>(null);
 useEffect(() => {
 if (!query) { setData([]); setLoading(false); return; }
 let ignore = false;
 setLoading(true);
 fetchJSON<WikiResult[]>(`/wiki/search?q=${encodeURIComponent(query)}`)
 .then(d => { if (!ignore) { setData(d); setLoading(false); } })
 .catch(e => { if (!ignore) { setError(e.message); setLoading(false); } });
 return () => { ignore = true; };
 }, [query]);
 return { data, loading, error };
}
function useRules() {
 const [doc, setDoc] = useState<RulesDoc | null>(null);
 const [loading, setLoading] = useState(true);
 const [error, setError] = useState<string | null>(null);
 useEffect(() => { fetchJSON<RulesDoc>("/rules").then(d => { setDoc(d); setLoading(false); }).catch(e => { setError( return { doc, loading, error };
}
async function createTicket(payload: { email: string; subject: string; message: string }) {
 return fetchJSON<{ id: string }>("/support/tickets", { method: "POST", body: JSON.stringify(payload) });
}
// ===== I18N =====
const i18n = {
 it: {
 nav: {
 home: "Home",
 news: "News",
 start: "Inizia",
 pvp: "PvP",
 ladder: "Classifiche",
 shop: "Shop",
 media: "Media",
 faq: "FAQ",
 wiki: "Wiki",
 tickets: "Supporto",
 rules: "Regole",
 status: "Stato Server",
 },
 hero: {
 titleTop: "Un nuovo capitolo",
 title: "Shaiya — Rinascita",
 subtitle:
 "Un'esperienza unica, epica e bilanciata. Combattimenti intensi, progressione chiara, zero pay■to■win.",
 ctaPrimary: "Scarica il client",
 ctaSecondary: "Crea account",
 onlineNow: "Giocatori online ora",
 },
 features: {
 title: "Perché giocare qui",
 items: [
 {
 icon: Shield,
 title: "Bilanciamento moderno",
 desc: "Classi ribilanciate con dati reali e test comunitari.",
 },
 {
 icon: Trophy,
 title: "PvP che conta",
 desc: "Ricompense stagionali, draft arena 3v3, anti■wintrade.",
 },
 {
 icon: Globe,
 title: "Server stabili EU",
 desc: "Bassa latenza e protezioni anti■DDoS.",
 },
 {
 icon: Sparkles,
 title: "Zero P2W",
 desc: "Lo shop è solo cosmetico. Il merito è tutto tuo.",
 },
 ],
 },
 start: {
 title: "Come iniziare",
 step1: "Scarica il client",
 step2: "Crea l'account",
 step3: "Entra in gioco",
 note: "Guide rapide in-game e nel wiki.",
 },
 pvp: {
 title: "Zone PvP & Attività",
 subtitle:
 "Progressione chiara per bracket (1-15 / 20-30 / 60). Eventi giornalieri e raid dinamici.",
 },
 ladder: {
 title: "Top giocatori",
 kda: "KDA",
 rating: "Punti",
 },
 shop: {
 title: "Vetrina shop (solo cosmetici)",
 btn: "Vai allo Shop",
 },
 news: { title: "Ultime notizie" },
 events: { title: "Eventi in arrivo" },
 media: { title: "Galleria" },
 faq: { title: "Domande frequenti" },
 wiki: { title: "Wiki" },
 tickets: { title: "Apri un ticket" },
 rules: { title: "Regole del server" },
 status: { title: "Stato server" },
 footer: {
 rights: "Tutti i diritti riservati.",
 legal: "Termini",
 privacy: "Privacy",
 },
 },
 en: {
 nav: {
 home: "Home",
 news: "News",
 start: "Start",
 pvp: "PvP",
 ladder: "Ladder",
 shop: "Shop",
 media: "Media",
 faq: "FAQ",
 wiki: "Wiki",
 tickets: "Support",
 rules: "Rules",
 status: "Server Status",
 },
 hero: {
 titleTop: "A new chapter",
 title: "Shaiya — Reborn",
 subtitle:
 "Unique, epic and fair. Intense combat, clear progression, zero pay■to■win.",
 ctaPrimary: "Download client",
 ctaSecondary: "Create account",
 onlineNow: "Players online now",
 },
 features: {
 title: "Why play here",
 items: [
 { icon: Shield, title: "Modern balance", desc: "Classes tuned with live data & community tests." },
 { icon: Trophy, title: "Meaningful PvP", desc: "Seasonal rewards, 3v3 draft arena, anti■wintrade." },
 { icon: Globe, title: "Stable EU servers", desc: "Low latency and anti■DDoS protections." },
 { icon: Sparkles, title: "Zero P2W", desc: "Shop is cosmetic only. Skill decides." },
 ],
 },
 start: {
 title: "How to begin",
 step1: "Download the client",
 step2: "Create your account",
 step3: "Jump in",
 note: "Quick guides in-game and on the wiki.",
 },
 pvp: {
 title: "PvP Zones & Activities",
 subtitle: "Clear bracket progression (1-15 / 20-30 / 60). Daily events & dynamic raids.",
 },
 ladder: { title: "Top players", kda: "KDA", rating: "Points" },
 shop: { title: "Shop showcase (cosmetics only)", btn: "Open Shop" },
 news: { title: "Latest news" },
 events: { title: "Upcoming events" },
 media: { title: "Gallery" },
 faq: { title: "FAQ" },
 wiki: { title: "Wiki" },
 tickets: { title: "Open a ticket" },
 rules: { title: "Server rules" },
 status: { title: "Server status" },
 footer: { rights: "All rights reserved.", legal: "Terms", privacy: "Privacy" },
 },
};
function useThemeToggle() {
 const [theme, setTheme] = useState("dark");
 useEffect(() => {
 const root = document.documentElement;
 if (theme === "dark") root.classList.add("dark");
 else root.classList.remove("dark");
 }, [theme]);
 return { theme, setTheme };
}
export default function ShaiyaEpicSite() {
 const [lang, setLang] = useState<"it" | "en">("it");
 const t = useMemo(() => i18n[lang], [lang]);
 const { theme, setTheme } = useThemeToggle();
 const [authOpen, setAuthOpen] = useState(false);
 const [tab, setTab] = useState("login");
 const { data: popData, loading: popLoad } = usePopulation();
 const { data: news, loading: newsLoad } = useNews();
 const { data: events, loading: eventsLoad } = useEvents();
 const { data: ladder, loading: ladderLoad } = useLadder();
 const { data: shop, loading: shopLoad } = useShop();
 const { data: status, pingMs, loading: statusLoad } = useServerStatus();
 const [wikiQuery, setWikiQuery] = useState("");
 const wiki = useWiki(wikiQuery);
 // derived online count
 const onlineNow = (popData?.length ? Math.max(...popData.map(d => d.online)) : 0);
 return (
 <div className="min-h-screen bg-[radial-gradient(ellipse_at_top,rgba(51,65,85,.35),transparent_60%),linear-gradie {/* Top gradient aura */}
 <div className="pointer-events-none fixed inset-0 -z-10 overflow-hidden">
 <div className="absolute -top-24 left-1/2 h-64 w-[72rem] -translate-x-1/2 rounded-full bg-gradient-to-r from- </div>
 {/* Navbar */}
 <nav className="sticky top-0 z-40 backdrop-blur supports-[backdrop-filter]:bg-slate-900/60 border-b border-whit <div className="mx-auto flex max-w-7xl items-center justify-between px-4 py-3">
 <div className="flex items-center gap-3">
 <motion.div whileHover={{ rotate: -10 }} className="grid h-10 w-10 place-items-center rounded-xl bg-gradi <Swords className="h-6 w-6" />
 </motion.div>
 <div className="leading-tight">
 <span className="block text-sm uppercase tracking-wider text-slate-300">Shaiya</span>
 <span className="text-xl font-semibold">Rinascita</span>
 </div>
 </div>
 <div className="hidden items-center gap-6 md:flex">
 {([
 { k: "home", href: "#home" },
 { k: "news", href: "#news" },
 { k: "start", href: "#start" },
 { k: "pvp", href: "#pvp" },
 { k: "ladder", href: "#ladder" },
 { k: "shop", href: "#shop" },
 { k: "wiki", href: "#wiki" },
 { k: "tickets", href: "#tickets" },
 { k: "rules", href: "#rules" },
 { k: "status", href: "#status" },
 { k: "media", href: "#media" },
 { k: "faq", href: "#faq" },
 ] as const).map((item) => (
 <a key={item.k} href={item.href} className="text-sm font-medium text-slate-300 hover:text-white">
 {t.nav[item.k]}
 </a>
 ))}
 </div>
 <div className="flex items-center gap-2">
 <Button variant="ghost" size="icon" onClick={() => setLang((p) => (p === "it" ? "en" : "it"))} aria-label <Languages className="h-5 w-5" />
 </Button>
 <Button variant="ghost" size="icon" onClick={() => setTheme(theme === "dark" ? "light" : "dark")} aria-la {theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
 </Button>
 <Button onClick={() => { setAuthOpen(true); setTab("login"); }}>
 <LogIn className="mr-2 h-4 w-4" /> {lang === "it" ? "Accedi" : "Sign in"}
 </Button>
 </div>
 </div>
 </nav>
 {/* Hero */}
 <section id="home" className="relative mx-auto max-w-7xl px-4 pb-24 pt-16">
 {/* subtle grid */}
 <div className="pointer-events-none absolute inset-0 -z-10 [mask-image:radial-gradient(ellipse_at_center,blac <div className="h-full w-full bg-[linear-gradient(to_right,rgba(255,255,255,.06)_1px,transparent_1px),linea </div>
 <div className="grid items-center gap-10 md:grid-cols-2">
 <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
 <Badge className="mb-4 bg-emerald-600/90">{t.hero.titleTop}</Badge>
 <h1 className="text-balance text-5xl font-black tracking-tight md:text-6xl">
 {t.hero.title}
 </h1>
 <p className="mt-4 max-w-xl text-lg text-slate-300">{t.hero.subtitle}</p>
 <div className="mt-8 flex flex-wrap items-center gap-3">
 <Button size="lg">
 <DownloadIcon className="mr-2 h-5 w-5" /> {t.hero.ctaPrimary}
 </Button>
 <Button size="lg" variant="secondary" onClick={() => { setAuthOpen(true); setTab("register"); }}>
 <Sparkles className="mr-2 h-5 w-5" /> {t.hero.ctaSecondary}
 </Button>
 </div>
 <div className="mt-8 flex items-center gap-4">
 <div className="flex -space-x-3">
 {Array.from({ length: 5 }).map((_, i) => (
 <div key={i} className="h-8 w-8 rounded-full bg-gradient-to-br from-fuchsia-500 to-indigo-500 ring- ))}
 </div>
 <div>
 <div className="text-sm text-slate-400">{t.hero.onlineNow}</div>
 <div className="text-xl font-semibold">{onlineNow.toLocaleString()}</div>
 </div>
 </div>
 </motion.div>
 <motion.div initial={{ opacity: 0, scale: 0.97 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration <Card className="border-white/10 bg-white/5 backdrop-blur">
 <CardHeader>
 <CardTitle className="flex items-center gap-2">
 <Play className="h-5 w-5" /> Live Population
 </CardTitle>
 </CardHeader>
 <CardContent className="h-56">
 <ResponsiveContainer width="100%" height="100%">
 <AreaChart data={popData} margin={{ top: 10, right: 10, left: -10, bottom: 0 }}>
 <defs>
 <linearGradient id="grad" x1="0" y1="0" x2="0" y2="1">
 <stop offset="5%" stopColor="#8b5cf6" stopOpacity={0.8} />
 <stop offset="95%" stopColor="#8b5cf6" stopOpacity={0} />
 </linearGradient>
 </defs>
 <XAxis dataKey="t" stroke="currentColor" tick={{ fill: "#94a3b8" }} tickLine={false} axisLine={fa <YAxis stroke="currentColor" tick={{ fill: "#94a3b8" }} tickLine={false} axisLine={false} width={ <Tooltip contentStyle={{ background: "#0b1020", border: "1px solid rgba(255,255,255,.1)", color:  <Area type="monotone" dataKey="online" stroke="#a78bfa" fill="url(#grad)" strokeWidth={2} />
 </AreaChart>
 </ResponsiveContainer>
 {popLoad && <p className="mt-2 text-xs text-slate-400">Loading…</p>}
 </CardContent>
 </Card>
 </motion.div>
 </div>
 </section>
 {/* Features */}
 <section className="mx-auto max-w-7xl px-4 py-12">
 <h2 className="mb-6 text-3xl font-bold">{t.features.title}</h2>
 <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
 {t.features.items.map((f, i) => (
 <motion.div key={i} initial={{ opacity: 0, y: 12 }} whileInView={{ opacity: 1, y: 0 }} viewport={{ once:  <Card className="group border-white/10 bg-gradient-to-b from-white/5 to-white/0">
 <CardContent className="p-6">
 <div className="mb-4 inline-flex rounded-xl bg-white/5 p-3 ring-1 ring-white/10">
 {/* @ts-ignore */}
 <f.icon className="h-6 w-6 text-fuchsia-400 group-hover:scale-110 transition-transform" />
 </div>
 <h3 className="text-lg font-semibold">{f.title}</h3>
 <p className="mt-1 text-slate-300">{f.desc}</p>
 </CardContent>
 </Card>
 </motion.div>
 ))}
 </div>
 </section>
 {/* Start */}
 <section id="start" className="mx-auto max-w-7xl px-4 py-12">
 <div className="grid gap-8 lg:grid-cols-3">
 <div className="lg:col-span-1">
 <h2 className="text-3xl font-bold">{t.start.title}</h2>
 <p className="mt-2 text-slate-300">{t.start.note}</p>
 <div className="mt-6 flex gap-3">
 <Button>
 <DownloadIcon className="mr-2 h-4 w-4" /> {t.start.step1}
 </Button>
 <Button variant="secondary" onClick={() => { setAuthOpen(true); setTab("register"); }}>{t.start.step2}< </div>
 </div>
 <div className="lg:col-span-2">
 <ol className="grid gap-6 md:grid-cols-3">
 {[t.start.step1, t.start.step2, t.start.step3].map((s, i) => (
 <li key={i} className="relative rounded-2xl border border-white/10 bg-white/5 p-5">
 <span className="absolute -top-3 left-5 inline-flex h-8 w-8 items-center justify-center rounded-ful <p className="mt-2 font-medium">{s}</p>
 <Progress value={(i + 1) * 33.3} className="mt-4" />
 </li>
 ))}
 </ol>
 </div>
 </div>
 </section>
 {/* PvP */}
 <section id="pvp" className="mx-auto max-w-7xl px-4 py-12">
 <div className="mb-6 flex items-end justify-between gap-4">
 <div>
 <h2 className="text-3xl font-bold">{t.pvp.title}</h2>
 <p className="mt-1 text-slate-300">{t.pvp.subtitle}</p>
 </div>
 <Badge className="bg-indigo-600/90"><Calendar className="mr-1 h-4 w-4" /> Schedule</Badge>
 </div>
 <Tabs defaultValue="15" className="mt-2">
 <TabsList>
 <TabsTrigger value="15">Lv. 1–15</TabsTrigger>
 <TabsTrigger value="30">Lv. 20–30</TabsTrigger>
 <TabsTrigger value="60">Lv. 60</TabsTrigger>
 </TabsList>
 {(["15", "30", "60"] as const).map((br) => (
 <TabsContent key={br} value={br} className="grid gap-6 md:grid-cols-3">
 {[1, 2, 3].map((i) => (
 <Card key={i} className="border-white/10 bg-white/5">
 <CardHeader>
 <CardTitle className="flex items-center gap-2">
 <Shield className="h-5 w-5" /> Zona {i}
 </CardTitle>
 </CardHeader>
 <CardContent>
 <ul className="list-disc space-y-1 pl-5 text-slate-300">
 <li>Obiettivo dinamico</li>
 <li>Ricompense stagionali</li>
 <li>Cooldown eventi 2h</li>
 </ul>
 </CardContent>
 </Card>
 ))}
 </TabsContent>
 ))}
 </Tabs>
 </section>
 {/* Ladder */}
 <section id="ladder" className="mx-auto max-w-7xl px-4 py-12">
 <h2 className="mb-6 text-3xl font-bold">{t.ladder.title}</h2>
 <div className="overflow-hidden rounded-2xl border border-white/10">
 <table className="min-w-full divide-y divide-white/10">
 <thead className="bg-white/5">
 <tr>
 <th className="px-4 py-3 text-left text-sm font-semibold">#</th>
 <th className="px-4 py-3 text-left text-sm font-semibold">Player</th>
 <th className="px-4 py-3 text-left text-sm font-semibold">Class</th>
 <th className="px-4 py-3 text-left text-sm font-semibold">{t.ladder.kda}</th>
 <th className="px-4 py-3 text-left text-sm font-semibold">{t.ladder.rating}</th>
 </tr>
 </thead>
 <tbody className="divide-y divide-white/10">
 {(ladderLoad ? [] : ladder).map((p) => (
 <tr key={p.rank} className="hover:bg-white/5">
 <td className="px-4 py-3">{p.rank}</td>
 <td className="px-4 py-3 font-medium">{p.name}</td>
 <td className="px-4 py-3 text-slate-300">{p.class}</td>
 <td className="px-4 py-3">{p.kda}</td>
 <td className="px-4 py-3">{p.rating}</td>
 </tr>
 ))}
 {ladderLoad && (
 <tr><td colSpan={5} className="px-4 py-6 text-center text-slate-400">Loading…</td></tr>
 )}
 </tbody>
 </table>
 </div>
 </section>
 {/* Shop */}
 <section id="shop" className="mx-auto max-w-7xl px-4 py-12">
 <div className="mb-6 flex items-center justify-between">
 <h2 className="text-3xl font-bold">{t.shop.title}</h2>
 <Button variant="secondary">
 <ShoppingCart className="mr-2 h-4 w-4" /> {t.shop.btn}
 </Button>
 </div>
 <div className="grid gap-6 md:grid-cols-3">
 {(shopLoad ? [] : shop).map((item) => (
 <Card key={item.id} className="border-white/10 bg-gradient-to-b from-white/10 to-white/[0.04]">
 <CardContent className="p-6">
 <div className="aspect-video w-full overflow-hidden rounded-xl ring-1 ring-white/10">
 <div className="h-full w-full bg-[linear-gradient(135deg,#1e293b,#0b1020)]" style={{ backgroundImag </div>
 <div className="mt-4 flex items-start justify-between gap-4">
 <div>
 <p className="text-lg font-semibold">{item.name}</p>
 <p className="text-sm text-slate-400">{item.type}</p>
 </div>
 {item.tag && <Badge className="bg-fuchsia-600/90">{item.tag}</Badge>}
 </div>
 <div className="mt-4 flex items-center justify-between">
 <span className="text-slate-200">{item.price}</span>
 <Button size="sm" variant="secondary">Buy</Button>
 </div>
 </CardContent>
 </Card>
 ))}
 {shopLoad && Array.from({ length: 3 }).map((_,i) => (
 <Card key={i} className="border-white/10 bg-white/5"><CardContent className="p-6 text-slate-400">Loading… ))}
 </div>
 </section>
 {/* News & Events */}
 <section id="news" className="mx-auto max-w-7xl px-4 py-12">
 <div className="grid gap-8 lg:grid-cols-2">
 <div>
 <h2 className="mb-6 text-3xl font-bold">{t.news.title}</h2>
 <div className="grid gap-6">
 {(newsLoad ? [] : news).map((n) => (
 <Card key={n.id} className="border-white/10 bg-white/5">
 <CardContent className="p-6">
 <div className="mb-2 flex items-center gap-2 text-xs text-slate-400">
 <Badge variant="outline" className="border-white/20 text-slate-300">{n.tag}</Badge>
 <span>•</span>
 <span>{new Date(n.date).toLocaleDateString()}</span>
 </div>
 <p className="text-lg font-semibold">{n.title}</p>
 <p className="mt-1 text-slate-300">{n.excerpt}</p>
 </CardContent>
 </Card>
 ))}
 {newsLoad && <p className="text-slate-400">Loading…</p>}
 </div>
 </div>
 <div>
 <h2 className="mb-6 text-3xl font-bold">{t.events.title}</h2>
 <div className="grid gap-6">
 {(eventsLoad ? [] : events).map((e) => (
 <Card key={e.id} className="border-white/10 bg-white/5">
 <CardContent className="flex items-center gap-4 p-6">
 <div className="grid h-12 w-12 place-items-center rounded-xl bg-gradient-to-br from-emerald-600 t <Flame className="h-6 w-6" />
 </div>
 <div>
 <p className="text-sm text-slate-400">{e.when}</p>
 <p className="text-lg font-semibold">{e.title}</p>
 <p className="text-slate-300">{e.desc}</p>
 </div>
 <div className="ml-auto">
 <Button variant="secondary" size="sm">Remind me</Button>
 </div>
 </CardContent>
 </Card>
 ))}
 {eventsLoad && <p className="text-slate-400">Loading…</p>}
 </div>
 </div>
 </div>
 </section>
 {/* Wiki */}
 <section id="wiki" className="mx-auto max-w-7xl px-4 py-12">
 <div className="mb-6 flex items-center gap-3">
 <BookOpen className="h-6 w-6" />
 <h2 className="text-3xl font-bold">{t.wiki.title}</h2>
 </div>
 <div className="grid gap-4">
 <div className="grid gap-2 sm:grid-cols-[1fr,auto]">
 <Input placeholder={lang==="it"?"Cerca nel wiki…":"Search the wiki…"} value={wikiQuery} onChange={(e)=>se <Button variant="secondary"><Info className="mr-2 h-4 w-4" />{lang==="it"?"Suggerisci pagina":"Suggest pa </div>
 {wiki.loading && <p className="text-slate-400">Searching…</p>}
 <div className="grid gap-4 md:grid-cols-2">
 {wiki.data.map(item => (
 <Card key={item.id} className="border-white/10 bg-white/5">
 <CardContent className="p-5">
 <p className="text-lg font-semibold">{item.title}</p>
 <p className="mt-1 text-slate-300">{item.snippet}</p>
 <div className="mt-3">
 <a className="text-sm text-fuchsia-300 hover:text-fuchsia-200" href={`/wiki/${item.id}`}>Apri →< </div>
 </CardContent>
 </Card>
 ))}
 </div>
 </div>
 </section>
 {/* Support Tickets */}
 <section id="tickets" className="mx-auto max-w-7xl px-4 py-12">
 <div className="mb-6 flex items-center gap-3">
 <LifeBuoy className="h-6 w-6" />
 <h2 className="text-3xl font-bold">{t.tickets.title}</h2>
 </div>
 <TicketForm lang={lang} />
 </section>
 {/* Rules */}
 <section id="rules" className="mx-auto max-w-7xl px-4 py-12">
 <div className="mb-6 flex items-center gap-3">
 <ListChecks className="h-6 w-6" />
 <h2 className="text-3xl font-bold">{t.rules.title}</h2>
 </div>
 <RulesBlock />
 </section>
 {/* Status */}
 <section id="status" className="mx-auto max-w-7xl px-4 py-12">
 <div className="mb-6 flex items-center gap-3">
 <Activity className="h-6 w-6" />
 <h2 className="text-3xl font-bold">{t.status.title}</h2>
 </div>
 <div className="grid gap-6 md:grid-cols-4">
 <StatCard label={lang==="it"?"Giocatori online":"Players online"} value={statusLoad?"…":String(status?.onli <StatCard label={lang==="it"?"Versione":"Version"} value={statusLoad?"…":(status?.version ?? "-")} />
 <StatCard label={lang==="it"?"Uptime":"Uptime"} value={statusLoad?"…":formatUptime(status?.uptime ?? 0)} /> <StatCard label={lang==="it"?"Ping":"Ping"} value={pingMs?f"{pingMs} ms":"…"} />
 </div>
 <p className="mt-3 text-sm text-slate-400">{lang==="it"?"Ultimo riavvio":"Last restart"}: {status?.lastRestar </section>
 {/* Media */}
 <section id="media" className="mx-auto max-w-7xl px-4 py-12">
 <div className="mb-6 flex items-center justify-between">
 <h2 className="text-3xl font-bold">{t.media.title}</h2>
 <Button variant="secondary">
 <ImageIcon className="mr-2 h-4 w-4" /> Upload
 </Button>
 </div>
 <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
 {Array.from({ length: 8 }).map((_, i) => (
 <div key={i} className="group aspect-[4/3] overflow-hidden rounded-xl border border-white/10 bg-white/[0. <div className="h-full w-full scale-105 bg-[radial-gradient(circle_at_30%_30%,rgba(168,85,247,0.25),tra </div>
 ))}
 </div>
 </section>
 {/* FAQ */}
 <section id="faq" className="mx-auto max-w-7xl px-4 py-12">
 <h2 className="mb-6 text-3xl font-bold">{t.faq.title}</h2>
 <div className="grid gap-4 md:grid-cols-2">
 {[
 {
 q: lang === "it" ? "Lo shop è pay■to■win?" : "Is the shop pay■to■win?",
 a: lang === "it" ? "No. Solo cosmetici, nessun vantaggio di potere." : "No. Cosmetics only, no power ad },
 {
 q: lang === "it" ? "Come segnalare bug o cheater?" : "How to report bugs or cheaters?",
 a: lang === "it" ? "Tramite ticket nel pannello account o sul nostro Discord." : "Open a ticket in the  },
 {
 q: lang === "it" ? "Esistono reset?" : "Are there wipes?",
 a: lang === "it" ? "Solo stagionali, preannunciati con largo anticipo." : "Seasonal only, announced wel },
 {
 q: lang === "it" ? "Quali lingue supportate?" : "Which languages do you support?",
 a: lang === "it" ? "Italiano e Inglese (altre in arrivo)." : "Italian and English (more coming).",
 },
 ].map((f, i) => (
 <Card key={i} className="border-white/10 bg-white/5">
 <CardContent className="p-6">
 <p className="font-semibold">{f.q}</p>
 <p className="mt-1 text-slate-300">{f.a}</p>
 </CardContent>
 </Card>
 ))}
 </div>
 </section>
 {/* Footer */}
 <footer className="border-t border-white/10 bg-black/30">
 <div className="mx-auto max-w-7xl px-4 py-10">
 <div className="grid gap-8 md:grid-cols-4">
 <div>
 <div className="flex items-center gap-2">
 <Swords className="h-5 w-5" />
 <span className="font-semibold">Shaiya Rinascita</span>
 </div>
 <p className="mt-2 max-w-xs text-slate-400">
 {lang === "it"
 ? "Server stabile, competitivo e fair. PvP che premia l'abilità."
 : "Stable, competitive and fair server. PvP that rewards skill."}
 </p>
 </div>
 <div>
 <p className="mb-3 font-semibold">{lang === "it" ? "Risorse" : "Resources"}</p>
 <ul className="space-y-2 text-slate-300">
 <li><a href="#start" className="hover:text-white">{t.start.title}</a></li>
 <li><a href="#news" className="hover:text-white">{t.news.title}</a></li>
 <li><a href="#faq" className="hover:text-white">{t.faq.title}</a></li>
 </ul>
 </div>
 <div>
 <p className="mb-3 font-semibold">{lang === "it" ? "Social" : "Social"}</p>
 <ul className="space-y-2 text-slate-300">
 <li><a className="hover:text-white" href="#">Discord</a></li>
 <li><a className="hover:text-white" href="#">YouTube</a></li>
 <li><a className="hover:text-white" href="#">X / Twitter</a></li>
 </ul>
 </div>
 <div className="text-sm text-slate-400">
 <p>© {new Date().getFullYear()} Shaiya Rinascita. {t.footer.rights}</p>
 <div className="mt-2 flex gap-3">
 <a href="#" className="hover:text-slate-200">{t.footer.legal}</a>
 <span>•</span>
 <a href="#" className="hover:text-slate-200">{t.footer.privacy}</a>
 </div>
 </div>
 </div>
 </div>
 </footer>
 {/* Auth Dialog */}
 <Dialog open={authOpen} onOpenChange={setAuthOpen}>
 <DialogContent className="border-white/10 bg-slate-900/95 text-slate-100">
 <DialogHeader>
 <DialogTitle className="flex items-center gap-2">
 <LogIn className="h-5 w-5" /> {tab === "login" ? (lang === "it" ? "Accedi" : "Sign in") : (lang === "it </DialogTitle>
 <DialogDescription>
 {lang === "it" ? "Accedi o crea il tuo account per iniziare a giocare." : "Sign in or create your accou </DialogDescription>
 </DialogHeader>
 <Tabs value={tab} onValueChange={(v) => setTab(v)} className="mt-2 w-full">
 <TabsList className="grid w-full grid-cols-2">
 <TabsTrigger value="login">{lang === "it" ? "Login" : "Login"}</TabsTrigger>
 <TabsTrigger value="register">{lang === "it" ? "Registrati" : "Register"}</TabsTrigger>
 </TabsList>
 <TabsContent value="login" className="mt-4">
 <form className="space-y-4" onSubmit={(e)=>e.preventDefault()}>
 <div>
 <Label htmlFor="emailL">Email</Label>
 <Input id="emailL" type="email" placeholder="you@example.com" />
 </div>
 <div>
 <Label htmlFor="passL">Password</Label>
 <Input id="passL" type="password" placeholder="••••••••" />
 </div>
 <Button className="w-full">{lang === "it" ? "Entra" : "Enter"}</Button>
 </form>
 </TabsContent>
 <TabsContent value="register" className="mt-4">
 <form className="space-y-4" onSubmit={(e)=>e.preventDefault()}>
 <div>
 <Label htmlFor="userR">Username</Label>
 <Input id="userR" placeholder="Valkyra" />
 </div>
 <div>
 <Label htmlFor="emailR">Email</Label>
 <Input id="emailR" type="email" placeholder="you@example.com" />
 </div>
 <div>
 <Label htmlFor="passR">Password</Label>
 <Input id="passR" type="password" placeholder="••••••••" />
 </div>
 <Button className="w-full">{lang === "it" ? "Crea account" : "Create account"}</Button>
 </form>
 </TabsContent>
 </Tabs>
 </DialogContent>
 </Dialog>
 </div>
 );
}
// ===== SUB-COMPONENTS =====
function StatCard({ label, value }: { label: string; value: string }) {
 return (
 <Card className="border-white/10 bg-white/5">
 <CardContent className="p-6">
 <p className="text-sm text-slate-400">{label}</p>
 <p className="mt-1 text-2xl font-semibold">{value}</p>
 </CardContent>
 </Card>
 );
}
function formatUptime(seconds: number) {
 const d = Math.floor(seconds / 86400);
 const h = Math.floor((seconds % 86400) / 3600);
 const m = Math.floor((seconds % 3600) / 60);
 return `${d}d ${h}h ${m}m`;
}
function TicketForm({ lang }: { lang: "it" | "en" }) {
 const [email, setEmail] = useState("");
 const [subject, setSubject] = useState("");
 const [message, setMessage] = useState("");
 const [loading, setLoading] = useState(false);
 const [ticketId, setTicketId] = useState<string | null>(null);
 const [error, setError] = useState<string | null>(null);
 const submit = async (e: React.FormEvent) => {
 e.preventDefault();
 setLoading(true); setError(null); setTicketId(null);
 try {
 const { id } = await createTicket({ email, subject, message });
 setTicketId(id);
 setEmail(""); setSubject(""); setMessage("");
 } catch (e: any) { setError(e.message); }
 finally { setLoading(false); }
 };
 return (
 <Card className="border-white/10 bg-white/5">
 <CardContent className="p-6">
 <form onSubmit={submit} className="grid gap-4">
 <div className="grid gap-2 md:grid-cols-2">
 <div>
 <Label>Email</Label>
 <Input value={email} onChange={(e)=>setEmail(e.target.value)} required type="email" placeholder="you@ex </div>
 <div>
 <Label>{lang==="it"?"Oggetto":"Subject"}</Label>
 <Input value={subject} onChange={(e)=>setSubject(e.target.value)} required placeholder={lang==="it"?"Pr </div>
 </div>
 <div>
 <Label>{lang==="it"?"Messaggio":"Message"}</Label>
 <Textarea value={message} onChange={(e)=>setMessage(e.target.value)} required rows={5} placeholder={lang= </div>
 <div className="flex items-center gap-3">
 <Button type="submit" disabled={loading}>
 <Send className="mr-2 h-4 w-4" /> {loading ? (lang==="it"?"Invio…":"Sending…") : (lang==="it"?"Invia":" </Button>
 {ticketId && <span className="text-sm text-emerald-400">{lang==="it"?"Ticket creato #":"Ticket created #" {error && <span className="text-sm text-rose-400">{error}</span>}
 </div>
 </form>
 </CardContent>
 </Card>
 );
}
function RulesBlock() {
 const { doc, loading, error } = useRules();
 if (loading) return <Card className="border-white/10 bg-white/5"><CardContent className="p-6 text-slate-400">Loadin if (error) return <Card className="border-white/10 bg-white/5"><CardContent className="p-6 text-rose-400">{error}</ return (
 <Card className="border-white/10 bg-white/5">
 <CardContent className="prose prose-invert max-w-none p-6 whitespace-pre-wrap">
 {doc?.markdown ?? "—"}
 {doc?.updatedAt && <p className="mt-4 text-xs text-slate-400">Aggiornato: {new Date(doc.updatedAt).toLocaleSt </CardContent>
 </Card>
 );
}
